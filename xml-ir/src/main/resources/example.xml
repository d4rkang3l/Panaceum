<unit>
    <package name="com.tinkerpop.pipes.sideeffect"/>
    <imports>
        <import>com.tinkerpop.pipes.AbstractPipe</import>
        <import>com.tinkerpop.pipes.Pipe</import>
        <import>com.tinkerpop.pipes.PipeFunction</import>
        <import>com.tinkerpop.pipes.util.iterators.ExpandableMultiIterator</import>
        <import>com.tinkerpop.pipes.util.iterators.SingleIterator</import>
        <import>java.util.HashMap</import>
        <import>java.util.Iterator</import>
        <import>java.util.Map</import>
    </imports>
    <class name="GroupByReducePipe" extends="AbstractPipe<S, S>">
        <field name="byMap" type="Map" isFinal="false"/>
        <field name="keyFunction" type="PipeFunction" isFinal="true"/>
        <field name="valueFunction" type="PipeFunction" isFinal="true"/>
        <field name="reduceFunction" type="PipeFunction" isFinal="true"/>
        <field name="reduceMap" type="Map" isFinal="false"/>
        <constructor modifier="public">
            <parameters>
                <parameter name="keyFunction" type="PipeFunction"/>
                <parameter name="valueFunction" type="PipeFunction"/>
                <parameter name="reduceFunction" type="PipeFunction"/>
            </parameters>
        </constructor>
        <constructor modifier="public">
            <parameters>
                <parameter name="reduceMap" type="Map"/>
                <parameter name="keyFunction" type="PipeFunction"/>
                <parameter name="valueFunction" type="PipeFunction"/>
                <parameter name="reduceFunction" type="PipeFunction"/>
            </parameters>
        </constructor>
        <method name="processNextStart" modifer="protected" isFinal="false" isAbstract="false">
        </method>
        <method name="addValue" modifer="public" isFinal="false" isAbstract="false">
            <parameters>
                <parameter name="value" type="V"/>
                <parameter name="values" type="ExpandableMultiIterator"/>
            </parameters>
            <body>
                <stmt type="IfStmt"/>
            </body>
        </method>
        <method name="getSideEffect" modifer="public" isFinal="false" isAbstract="false">
        </method>
        <method name="getKey" modifer="private" isFinal="false" isAbstract="false">
            <parameters>
                <parameter name="start" type="S"/>
            </parameters>
            <body>
                <stmt type="IfStmt"/>
            </body>
        </method>
        <method name="getValue" modifer="private" isFinal="false" isAbstract="false">
            <parameters>
                <parameter name="start" type="S"/>
            </parameters>
            <body>
                <stmt type="IfStmt"/>
            </body>
        </method>
        <method name="reset" modifer="public" isFinal="false" isAbstract="false">
        </method>
    </class>
</unit>

